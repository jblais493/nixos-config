#+title: Joshua Blais' Nix Configuration

This is a literate file using [[https://orgmode.org/][org-mode]] to [[https://orgmode.org/manual/Extracting-Source-Code.html][tangle]] all code blocks to various Nix files across the configuration. I am used to one, massive, partially organized file (see my Emacs Configuration), so this seemed natural: Documentation and configuration all in one file? How nice.

* Introduction
NixOS is what I would refer to as "the endgame of system management". I have used various distributions of Linux in the past, and while I have no grips with the likes of Debian, Fedora, or Arch, I have always forgotten configuration settings in the past, or had breaking changes on each and every distro. NixOS offers the bleeding edge with the stable, allowing easy rollbacks of any issues, allowing me to  continue on with work and then fix things at a later date. This is increasingly important as I host various projects and services for a broader audience and cannot deal with any downtime.

What makes this possible is:
- NixOS
- Home-manager
- deploy-rs
- nixos-anywhere

* Hosts
** Theologica
*** README.md
#+begin_src markdown :tangle hosts/theologica/README.md
# Theologica

My daily driver machine, a Lenovo T14s gen 3 laptop.

## Specifications
- Model: Lenovo T14s Gen 3
- Purpose: Daily development and writing work
- Desktop: Hyprland
#+end_src

** King
*** README.md
#+begin_src markdown :tangle hosts/king/README.md
# King

My testing machine, a Lenovo T430 laptop.

## Specifications
- Model: Lenovo T430
- Purpose: Testing configurations before deploying to main machine
- Desktop: Hyprland (testing)
#+end_src
** Empirica
** Alexandria
** Empire
** Citadel
* Modules
** Development
** CLI/TUI
*** nvim.nix
*** git.nix
***
** Desktop
*** hyprland.nix
#+begin_src nix :tangle modules/desktop/hyprland.nix

#+end_src
*** rofi.nix
Wofi on wayland
#+begin_src nix :tangle modules/desktop/wofi.nix

#+end_src
*** kitty.nix
#+begin_src nix :tangle modules/desktop/kitty.nix

#+end_src
** Server
** Services
*** calibre.nix
#+begin_src nix :tangle modules/services/calibre.nix

#+end_src
*** syncthing.nix
#+begin_src nix :tangle modules/services/syncthing.nix

#+end_src
*** homepage.nix
#+begin_src nix :tangle modules/services/homepage.nix

#+end_src
*** pihole.nix
#+begin_src nix :tangle modules/services/pihole.nix

#+end_src
*** jellyfin.nix
#+begin_src nix :tangle modules/services/jellyfin.nix

#+end_src
*** plex.nix
#+begin_src nix :tangle modules/services/plex.nix

#+end_src
*** nextcloud.nix
#+begin_src nix :tangle modules/services/nextcloud.nix

#+end_src
*** audiobookshelf.nix
#+begin_src nix :tangle modules/services/audiobookshelf.nix

#+end_src
*** lidarr.nix
#+begin_src nix :tangle modules/services/lidarr.nix

#+end_src
*** radarr.nix
#+begin_src nix :tangle modules/services/radarr.nix

#+end_src
*** prowlarr.nix
#+begin_src nix :tangle modules/services/prowlarr.nix

#+end_src
*** qbittorrent.nix
#+begin_src nix :tangle modules/services/qbittorrent.nix

#+end_src
*** gluetun.nix
#+begin_src nix :tangle modules/services/gluetun.nix

#+end_src

** Shared
** Security
*** fail2ban.nix
** Media
*** music.nix
#+begin_src nix :tangle modules/media/music.nix

#+end_src
*** video.nix
#+begin_src nix :tangle modules/media/video.nix

#+end_src
*** pdf.nix
#+begin_src nix :tangle modules/media/pdf.nix

#+end_src
* Overlays
* Secrets
We manage secrets with [[https://github.com/ryantm/agenix][agenix]].

The workflow for adding a secret is as follows:
1. Add secret to secrets.nix - specify which keys can decrypt it
2. Create the secret: agenix -e new-secret.age
3. Rekey existing secrets if you added new machines: agenix -r
4. Deploy: Your NixOS systems will automatically decrypt the secrets they have keys for

You can retrieve Machine SSH keys by running ~ls -la /etc/ssh/~ in any Linux machine with ssh enabled
** secrets.nix
#+begin_src nix :tangle secrets/secrets.nix
let
  # Your personal SSH public key (from ~/.ssh/joshuakey.pub)
  joshua = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICCWNto66rFbOvb1VDEDuZYdwHQPfKM7+EjpnHvs3eRr joshua@joshuablais.com";

  # Machine SSH host keys
  # king = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBb root@king";
  # theologica = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc root@theologica";
  # alexandria = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDd root@alexandria";
  # empire = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEe root@empire";


  # Groups for convenience
  users = [ joshua ];
  # desktops = [ king theologica ];
  # servers = [ alexandria empire ];
  # allSystems = desktops ++ servers;
in
{
  # Database secrets (only for servers)
  "postgres-password.age".publicKeys = users;
}
#+end_src

* flake.nix
#+begin_src nix :tangle flake.nix
{
  description = "Joshua Blais' NixOS Configuration";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "github:NixOS/nixpkgs/nixos-25.05";

    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    deploy-rs = {
      url = "github:serokell/deploy-rs";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    agenix = {
      url = "github:ryantm/agenix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, home-manager, deploy-rs, agenix, ... }@inputs: {
    nixosConfigurations = {
      # Laptop hosts
      theologica = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/theologica/configuration.nix
          agenix.nixosModules.default
          ./modules/shared
          ./modules/desktop
          ./modules/cli-tui
          ./modules/development
          ./modules/media
        ];
      };

      king = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/king/configuration.nix
          agenix.nixosModules.default
          ./modules/shared
          ./modules/desktop
          ./modules/cli-tui
          ./modules/development
        ];
      };

      # Server hosts
      alexandria = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/alexandria/configuration.nix
          ./modules/shared
          ./modules/server
          ./modules/services
          ./modules/security
        ];
      };

      empire = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/empire/configuration.nix
          ./modules/shared
          ./modules/server
          ./modules/security
        ];
      };
    };

    # Deploy-rs configuration for remote deployment
    deploy.nodes = {
      alexandria = {
        hostname = "alexandria.your-domain.com";
        profiles.system = {
          user = "root";
          path = deploy-rs.lib.x86_64-linux.activate.nixos self.nixosConfigurations.alexandria;
        };
      };
    };
  };
}
#+end_src
