#+title: Joshua Blais' Nix Configuration

[[https://nixos.org][https://img.shields.io/badge/NixOS-unstable-blue.svg?style=flat-square&logo=NixOS&logoColor=white]]

#+BEGIN_QUOTE
*Disclaimer:* I have no idea what I am doing, so take all of this with a grain (massive boulder) of salt.
#+END_QUOTE


* Introduction
This is a literate file using [[https://orgmode.org/][org-mode]] to [[https://orgmode.org/manual/Extracting-Source-Code.html][tangle]] all code blocks to various *.nix files across the configuration. I am used to one, massive (partially) organized file (see my [[https://github.com/jblais493/nixos-config/blob/master/dotfiles/doom/config.org][Emacs Configuration]]), so this seemed natural: Documentation and configuration all in one file? How nice.

What this ends up being is, quite literally, the *One File to Rule Them All*: My *entire computing landscape is declared* right where you are looking. This is the power of Nix.

[[https://nixos.org/][NixOS]] is what I would refer to as "the endgame of systems management". I have used various distributions of Linux in the past, and while I have no gripes with the likes of Debian, Fedora, or Arch, I have always forgotten configuration settings in the past, struggled to maintain multiple machines without drift, or had breaking changes on each and every distro.

NixOS offers the bleeding edge with the stable, allowing easy rollbacks of any issues, allowing me to  continue on with work and then fix things at a later date if I have a breaking change. This is increasingly important as I host various projects and services for a broader audience and cannot deal with any downtime.

What makes this possible is:
- [[https://nixos.org/][NixOS]]
- [[https://github.com/nix-community/home-manager][home-manager]]
- [[https://github.com/serokell/deploy-rs][deploy-rs]]
- [[https://github.com/nix-community/nixos-anywhere][nixos-anywhere]]
- [[https://orgmode.org/][org-mode]] (this document)

Excited yet? Let us begin...
** Setting this all up
*** Local Installation (Laptops/Desktops)
1. Obtain [[https://nixos.org/download/][installation media for nixOS]].
2. Flash .iso to flash drive using ~dd~ or similar tool:
   #+begin_src bash
   dd if=nixos-minimal-xx.xx.iso of=/dev/sdX bs=4M status=progress
   #+end_src
3. Boot up installer and connect to internet
4. Partition your drives (example for UEFI systems):
   #+begin_src bash
   # Create partitions
   parted /dev/nvme0n1 -- mklabel gpt
   parted /dev/nvme0n1 -- mkpart primary 512MiB -8GiB
   parted /dev/nvme0n1 -- mkpart primary linux-swap -8GiB 100%
   parted /dev/nvme0n1 -- mkpart ESP fat32 1MiB 512MiB
   parted /dev/nvme0n1 -- set 3 esp on

   # Format partitions
   mkfs.ext4 -L nixos /dev/nvme0n1p1
   mkswap -L swap /dev/nvme0n1p2
   mkfs.fat -F 32 -n boot /dev/nvme0n1p3

   # Mount filesystems
   mount /dev/disk/by-label/nixos /mnt
   mkdir -p /mnt/boot
   mount /dev/disk/by-label/boot /mnt/boot
   swapon /dev/nvme0n1p2
   #+end_src
5. Generate hardware configuration:
   #+begin_src bash
   nixos-generate-config --root /mnt
   #+end_src
6. Clone this repository:
   #+begin_src bash
   cd /mnt/home
   git clone https://github.com/jblais493/nixos-config.git
   #+end_src
7. Copy the generated hardware configuration:
   #+begin_src bash
   cp /mnt/etc/nixos/hardware-configuration.nix /mnt/home/nixos-config/hosts/YOUR_HOST/
   #+end_src
8. Edit the host configuration to match your setup:
   #+begin_src bash
   # Edit hostname and any host-specific settings
   nano /mnt/home/nixos-config/hosts/YOUR_HOST/configuration.nix
   #+end_src
9. Test the configuration:
   #+begin_src bash
   cd /mnt/home/nixos-config
   nix flake check
   #+end_src
10. Install NixOS:
    #+begin_src bash
    nixos-install --flake .#YOUR_HOST
    #+end_src
11. Reboot and enjoy your declarative system!

*** Installation on VPS/headless servers
For automated server deployments, use [[https://nix-community.github.io/nixos-anywhere/quickstart.html][nixos-anywhere]].

Quick server setup:
#+begin_src bash
# Install nixos-anywhere
nix run github:nix-community/nixos-anywhere -- \
  --flake .#YOUR_SERVER_HOST \
  root@your-server-ip
#+end_src

* Dotfiles
This directory contains all dotfiles for the programs and tooling I use. I previously used [[https://www.gnu.org/software/stow/][Stow]] to organize all these config files, but now use home-manager's ~mkOutOfStoreSymlink~ to sym link and keep these files organized within this one config - simplification is beautiful. See the section on the home-manager module below.

#+begin_src bash
❯ tree -d -L 2
├── doom
│   ├── lisp
│   ├── private
│   ├── snippets
│   ├── templates
│   └── themes
├── hypr
├── kitty
├── mpd
│   └── playlists
├── nvim
│   ├── lua
│   ├── scripts
│   └── snippets
├── +STORE
│   └── dictionary
├── swaync
│   └── styles
├── tmux
│   └── tmux
├── waybar
│   ├── modules
│   └── scripts
├── wofi
├── zathura
└── zsh
#+end_src

* Hosts
** Theologica
*** README.md
#+begin_src markdown :tangle hosts/theologica/README.md
# Theologica
My daily driver machine, a Lenovo T14s gen 3 laptop.

## Specifications
- Model: Lenovo T14s Gen 3
- Purpose: Daily development and writing work
- Desktop: Hyprland

### Hardware override
Adding
#+end_src
*** configuration.nix
This declares all imported modules and specific tweaks to the Theologica host:
#+begin_src nix :tangle hosts/theologica/configuration.nix
{ config, pkgs, inputs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ./hardware-overrides.nix
    ../../modules/desktop
    ../../modules/shared
    ../../modules/cli-tui
    ../../modules/development
    ../../modules/media
    ../../modules/security
    ../../modules/secrets-joshua.nix
  ];

  # Host-specific configuration
  networking.hostName = "theologica";

  # Boot loader configuration
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # Define your user properly
  users.users.joshua = {
    isNormalUser = true;
    description = "Joshua Blais";
    group = "joshua";
    extraGroups = [ "networkmanager" "wheel" ];
  };

  # Create the user group
  users.groups.joshua = {};

  # Basic system configuration
  time.timeZone = "America/Edmonton";
  i18n.defaultLocale = "en_CA.UTF-8";

  # Set the state version
  system.stateVersion = "25.05";
}
#+end_src
*** hardware-configuration.nix
#+begin_src nix :tangle hosts/theologica/hardware-configuration.nix
# This is a placeholder hardware configuration
# You'll need to generate the real one when you install NixOS
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "thunderbolt" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/14d03f28-59d0-4e29-8ea0-fec882ed5eac";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-08dfaa11-224c-4623-a507-656a67258b8c".device = "/dev/disk/by-uuid/08dfaa11-224c-4623-a507-656a67258b8c";

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/23D9-F036";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp53s0f4u1u4u3.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wwan0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src
*** Hardware Overrides
Adds in vulcan support for builtin AMD GPU
#+begin_src nix :tangle hosts/theologica/hardware-overrides.nix
# Hardware-specific overrides that don't belong in auto-generated hardware-configuration.nix
{ config, pkgs, lib, ... }:
{
  # AMD Radeon 680M (Rembrandt) Graphics Configuration
  hardware.graphics = {
    enable = true;
    enable32Bit = true;

    extraPackages = with pkgs; [
      amdvlk              # AMD Vulkan driver
      libva               # Video acceleration API
      vaapiVdpau          # VDPAU backend for VAAPI
      libvdpau-va-gl      # VDPAU driver
    ];

    extraPackages32 = with pkgs.pkgsi686Linux; [
      amdvlk              # 32-bit Vulkan for compatibility
    ];
  };

  # AMD-specific environment variables
  environment.variables = {
    AMD_VULKAN_ICD = "RADV";           # Use open-source RADV driver
    LIBVA_DRIVER_NAME = "radeonsi";    # Video acceleration driver
  };
}
#+end_src

** King
*** README.md
#+begin_src markdown :tangle hosts/king/README.md
# King

My testing machine, a Lenovo T430 laptop.

## Specifications
- Model: Lenovo T430
- Purpose: Testing configurations before deploying to main machine
- Desktop: Hyprland (testing)
#+end_src

*** configuration.nix
This declares all imported modules and specific tweaks to the King host:
#+begin_src nix :tangle hosts/king/configuration.nix
{ config, pkgs, inputs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ../../modules/desktop
    ../../modules/shared
    ../../modules/cli-tui
    ../../modules/development
    ../../modules/media
  ];

  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  boot.loader.grub = {
    enable = true;
    devices = [ "/dev/sda" ];
    useOSProber = true;
  };

  # Setup keyfile
  boot.initrd.secrets = {
    "/boot/crypto_keyfile.bin" = null;
  };

  boot.loader.grub.enableCryptodisk = true;
  boot.initrd.luks.devices."luks-89f9b5d7-d320-4b23-8db5-e3e5823e0578".keyFile = "/boot/crypto_keyfile.bin";
  networking.hostName = "king"; # Define your hostname.

  users.users.joshua = {
    isNormalUser = true;
    description = "Joshua Blais";
    group = "joshua";
    extraGroups = [ "networkmanager" "wheel" ];
  };

  users.groups.joshua = {};

  time.timeZone = "America/Edmonton";
  i18n.defaultLocale = "en_CA.UTF-8";

  environment.systemPackages = with pkgs; [
    vim
    git
  ];

  system.stateVersion = "24.11";
}
#+end_src
*** hardware-configuration.nix
#+begin_src nix :tangle hosts/king/hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ehci_pci" "ahci" "usb_storage" "sd_mod" "sdhci_pci" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/cb65c275-db79-4ef5-b231-54100efad99d";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-89f9b5d7-d320-4b23-8db5-e3e5823e0578".device = "/dev/disk/by-uuid/89f9b5d7-d320-4b23-8db5-e3e5823e0578";

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s25.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

#+end_src
** Axios
*** README.md
#+begin_src markdown :tangle hosts/axios/README.md
# Axios

Aurelia's machine, a Lenovo X230 laptop.

## Specifications
- Model: Lenovo X230
- Purpose: Aurelia's daily driver
- Desktop: Hyprland
#+end_src

*** configuration.nix
This declares all imported modules and specific tweaks to the King host:
#+begin_src nix :tangle hosts/axios/configuration.nix
{ config, pkgs, lib, inputs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ../../modules/desktop
    ../../modules/shared
    ../../modules/cli-tui
    ../../modules/development
    ../../modules/media
    ../../modules/security
  ];

  # Bootloader.
  boot.loader.grub.enable = true;
  boot.loader.grub.device = "/dev/sda";
  boot.loader.grub.useOSProber = true;

  # Setup keyfile
  boot.initrd.secrets = {
    "/boot/crypto_keyfile.bin" = null;
  };

  boot.loader.grub.enableCryptodisk = true;

  boot.initrd.luks.devices."luks-68e37805-7090-4a03-a958-7c3271384a93".keyFile = "/boot/crypto_keyfile.bin";
  networking.hostName = "axios";
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Enable networking
  networking.networkmanager.enable = true;

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the GNOME Desktop Environment.
  # services.displayManager.gdm.enable = true;
  services.desktopManager.gnome.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };

# SSH configuration
services.openssh = {
  enable = true;
  settings = {
    PermitRootLogin = "no";  # Change this to "no" for security
    PasswordAuthentication = false;  # Enable password auth temporarily
  };
};

  networking.firewall.allowedTCPPorts = [ 22 ];

users.users.joshua = {
  isNormalUser = true;
  description = "joshua";
  extraGroups = [ "networkmanager" "wheel" "uinput" "input" ];
  openssh.authorizedKeys.keys = [
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICCWNto66rFbOvb1VDEDuZYdwHQPfKM7+EjpnHvs3eRr joshua@joshuablais.com"
  ];
};

  environment.systemPackages = with pkgs; [
    btrfs-progs
    btrbk
    compsize
  ];

  time.timeZone = "America/Edmonton";
  i18n.defaultLocale = "en_CA.UTF-8";

  system.stateVersion = "25.05";
}
#+end_src

*** hardware-configuration.nix
#+begin_src nix :tangle hosts/axios/hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ehci_pci" "ahci" "usb_storage" "sd_mod" "sdhci_pci" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/b2896044-4591-45ec-a462-eff16f2fbf5b";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-68e37805-7090-4a03-a958-7c3271384a93".device = "/dev/disk/by-uuid/68e37805-7090-4a03-a958-7c3271384a93";

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src
** Empirica
*** README.md
#+begin_src markdown :tangle hosts/empirica/README.md
# Empirica

Mini PC running all self-hosted services

## Specifications
- Model: Lenovo M910Q
- Purpose: Hosting all my home server stack
- Headless NixOS Server
#+end_src
*** configuration.nix
Empirica runs all my [[https://joshblais.com/posts/selfhosting/][selfhosted services to get me free from subscriptions]]

#+begin_src nix :tangle hosts/empirica/configuration.nix
{ config, pkgs, inputs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ../../modules/cli-tui
    ../../modules/shared
    ../../modules/security
    ../../modules/services
    ../../modules/secrets-empirica.nix
  ];

  services.homelab.enable = true;

  networking.hostName = "empirica";

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  users.groups.joshua = {};

  users.users.joshua = {
    isNormalUser = true;
    description = "Joshua Blais";
    group = "joshua";
    extraGroups = [ "networkmanager" "wheel" ];
  };

  users.users.immich = {
    isSystemUser = true;
    group = "immich";
    extraGroups = [ "joshua" ];  # Add to joshua's group
    description = "Immich photo management service";
  };

  security.sudo.extraRules = [
    {
      users = [ "joshua" ];
      commands = [
        {
          command = "ALL";
          options = [ "NOPASSWD" ];
        }
      ];
    }
  ];

  time.timeZone = "America/Edmonton";
  i18n.defaultLocale = "en_CA.UTF-8";

  services.openssh.enable = true;

  # Disable all systemd sleep/suspend/hibernate targets
  systemd.targets = {
    sleep.enable = false;
    suspend.enable = false;
    hibernate.enable = false;
    hybrid-sleep.enable = false;
  };

# Configure systemd-logind to ignore power events
  services.logind.settings = {
    Login = {
      HandlePowerKey = "ignore";
      IdleAction = "ignore";
    };
  };

  # Prevent automatic suspension
  powerManagement = {
    enable = false;  # Disable NixOS power management entirely
  };

  system.stateVersion = "25.05";
}
#+end_src
*** hardware-configuration.nix
#+begin_src nix :tangle hosts/empirica/hardware-configuration.nix
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/372b76cb-6dc6-498b-9489-1569751fde20";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/B55A-18D2";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src

** Alexandria
*** README.md
#+begin_src markdown :tangle hosts/alexandria/README.md
# Alexandria
Hetzner minimal server

## Specifications
#+end_src
*** configuration.nix
#+begin_src nix :tangle hosts/alexandria/configuration.nix
{ config, pkgs, inputs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ../../modules/security
  ];

  networking.hostName = "alexandria";

  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  boot.loader.grub = {
    enable = true;
    devices = [ "/dev/sda" ];
  };

  users.users.joshua = {
    isNormalUser = true;
    description = "Joshua Blais";
    group = "joshua";
    extraGroups = [ "networkmanager" "wheel" ];
  };

  users.groups.joshua = {};

  time.timeZone = "America/Edmonton";
  i18n.defaultLocale = "en_CA.UTF-8";

  environment.systemPackages = with pkgs; [
    vim
    git
  ];

  system.stateVersion = "24.11";
}
#+end_src

*** hardware-configuration.nix
#+begin_src nix :tangle hosts/alexandria/hardware-configuration.nix
# This is a placeholder hardware configuration
# You'll need to generate the real one when you install NixOS
{ config, lib, pkgs, modulesPath, ... }:
{
  imports = [ ];

  # Placeholder hardware config
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  # Placeholder filesystem config
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/placeholder";
    fsType = "ext4";
  };

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src
** Empire
*** README.md
#+begin_src markdown :tangle hosts/empire/README.md
# Empire

Hetzner server running all containers currently -

TODO: migrate all services to nixOS.
## Specifications
#+end_src
*** configuration.nix
#+begin_src nix :tangle hosts/empire/configuration.nix
{ config, pkgs, inputs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ../../modules/security
  ];

  networking.hostName = "empire";

  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  boot.loader.grub = {
    enable = true;
    devices = [ "/dev/sda" ];
  };

  users.users.joshua = {
    isNormalUser = true;
    description = "Joshua Blais";
    group = "joshua";
    extraGroups = [ "networkmanager" "wheel" ];
  };

  users.groups.joshua = {};

  time.timeZone = "America/Edmonton";
  i18n.defaultLocale = "en_CA.UTF-8";

  environment.systemPackages = with pkgs; [
    vim
    git
  ];

  system.stateVersion = "24.11";
}
#+end_src
*** hardware-configuration.nix
#+begin_src nix :tangle hosts/empire/hardware-configuration.nix
# This is a placeholder hardware configuration
# You'll need to generate the real one when you install NixOS
{ config, lib, pkgs, modulesPath, ... }:
{
  imports = [ ];

  # Placeholder hardware config
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  # Placeholder filesystem config
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/placeholder";
    fsType = "ext4";
  };

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src

** Citadel
* Modules
** Home-manager
I use [[https://github.com/nix-community/home-manager][home-manager]] to manage all dotfiles that require customization. I don't agree with rewriting my configs when you can just symlink them using ~mkOutOfStoreSymlink~
*** default.nix
#+begin_src nix :tangle modules/home-manager/default.nix
{ config, lib, pkgs, inputs, ... }:

let
  # Create a function to make out-of-store symlinks
  mkOutOfStoreSymlink = path: config.lib.file.mkOutOfStoreSymlink path;
in
{
  imports = [
    ./git.nix
    ./setup.nix
    ./theming.nix
    ./browsers.nix
  ];

  home.username = "joshua";
  home.homeDirectory = "/home/joshua";
  home.stateVersion = "25.05";

  # Let home-manager manage itself
  programs.home-manager.enable = true;

   # XDG MIME associations for file types
  xdg.mimeApps = {
    enable = true;
    defaultApplications = {
      "video/mp4" = "mpv.desktop";
      "video/x-msvideo" = "mpv.desktop";
      "video/x-matroska" = "mpv.desktop";
      "video/webm" = "mpv.desktop";
      "video/quicktime" = "mpv.desktop";
      "audio/mpeg" = "mpv.desktop";
      "audio/flac" = "mpv.desktop";
      "audio/ogg" = "mpv.desktop";
      "audio/wav" = "mpv.desktop";
      "image/jpeg" = "feh.desktop";
      "image/png" = "feh.desktop";
      "image/gif" = "feh.desktop";
      "application/pdf" = "org.pwmt.zathura.desktop";
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document" = "libreoffice-writer.desktop";
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" = "libreoffice-calc.desktop";
    };
  };

  # Use mkOutOfStoreSymlink for live editing
  home.file = {
    ".config/doom".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/doom";
    ".zshrc".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/zsh/.zshrc";
    ".config/starship.toml".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/starship/starship.toml";
    ".config/tmux/plugins".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/tmux/plugins";
    ".config/hypr".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/hypr";
    ".config/kitty".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/kitty";
    ".config/waybar".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/waybar";
    ".config/swaync".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/swaync";
    ".config/wofi".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/wofi";
    ".config/nvim".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/nvim";
    ".config/fastfetch".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/fastfetch";
    ".config/zathura".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/zathura";
    ".config/btop".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/btop";
    ".config/mpd".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/mpd";
    ".config/yt-dlp".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/yt-dlp";
    ".config/mpv".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/mpv";
    ".tmux.conf".source = mkOutOfStoreSymlink "${config.home.homeDirectory}/nixos-config/dotfiles/tmux/.tmux.conf";
  };

  services.mpd = {
    enable = true;
    musicDirectory = "/home/joshua/MusicOrganized";
  };
}
#+end_src

*** setup.nix
Scripts to setup a new machine with directories in their correct locations.

#+begin_src nix :tangle modules/home-manager/setup.nix
{ config, pkgs, ... }:
{
  # Clone repositories - skip private repos if SSH key not available
  home.activation.cloneRepos = config.lib.dag.entryAfter ["writeBoundary"] ''
    # Check if SSH key exists and GitHub is accessible
    if ${pkgs.openssh}/bin/ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
      # Scripts repo (private - only if SSH works)
      if [ ! -d "${config.home.homeDirectory}/.config/scripts" ]; then
        echo "Cloning private scripts repo..."
        ${pkgs.git}/bin/git clone git@github.com:jblais493/scripts.git ${config.home.homeDirectory}/.config/scripts
      fi
    else
      echo "SSH key not configured for GitHub, skipping private scripts repo"
    fi

    # Public repos
    if [ ! -d "${config.home.homeDirectory}/Pictures/Wallpapers" ]; then
      ${pkgs.git}/bin/git clone https://github.com/jblais493/Wallpapers ${config.home.homeDirectory}/Pictures/Wallpapers
    fi

    if [ ! -d "${config.home.homeDirectory}/.config/kmonad" ]; then
      ${pkgs.git}/bin/git clone https://github.com/jblais493/Kmonad-thinkpad ${config.home.homeDirectory}/.config/kmonad
    fi
  '';

  programs.gpg.enable = true;
  services.gpg-agent = {
    enable = true;
    pinentry.package = pkgs.pinentry-gtk2;
    extraConfig = ''
      allow-loopback-pinentry
    '';
  };
}
#+end_#+begin_src

#+end_src
*** theming.nix
#+begin_src nix :tangle modules/home-manager/theming.nix
{ config, pkgs, ... }:
{
  # Proper cursor configuration - the NixOS way
  home.pointerCursor = {
    name = "Nordzy-cursors-white";  # This is the correct name
    package = pkgs.nordzy-cursor-theme;
    size = 24;
    gtk.enable = true;
    x11.enable = true;
  };

  gtk = {
    enable = true;
    theme = {
      name = "Nordic-darker";
      package = pkgs.nordic;
    };
    iconTheme = {
      name = "Zafiro-icons-Dark";
      package = pkgs.zafiro-icons;
    };
    cursorTheme = {
      name = "Nordzy-cursors";
      package = pkgs.nordzy-cursor-theme;
      size = 24;
    };
    gtk3.extraConfig = {
      gtk-application-prefer-dark-theme = 1;
    };
    gtk4.extraConfig = {
      gtk-application-prefer-dark-theme = 1;
    };
  };

  # Qt follows GTK - the principle of least surprise
  qt = {
    enable = true;
    platformTheme.name = "gtk";
    style = {
      name = "gtk2";
    };
  };

  # Hyprland-specific cursor fixes (since you're using Hyprland)
  wayland.windowManager.hyprland.settings = {
    exec-once = [
      "gsettings set org.gnome.desktop.interface cursor-theme 'Nordzy-cursors-white'"
      "gsettings set org.gnome.desktop.interface cursor-size 24"
    ];
  };
}
#+end_src
*** git.nix
Establish git settings

#+begin_src nix :tangle modules/home-manager/git.nix
{ config, pkgs, ... }:
{
  programs.git = {
    enable = true;
    userName = "Joshua Blais";
    userEmail = "josh@joshblais.com";

    extraConfig = {
      credential.helper = "store";
      init.defaultBranch = "master";
      core = {
        editor = "nvim";
        autocrlf = "input";
      };
      pull.rebase = true;
      push.autoSetupRemote = true;

      url."git@github.com:".insteadOf = "https://github.com/";
    };
  };
}
#+end_src
*** browsers.nix
This configures extensions and settings in firefox

#+begin_src nix :tangle modules/home-manager/browsers.nix
{ config, pkgs, ... }:
{
programs.firefox = {
  enable = true;
  profiles.default = {
    name = "Default";
    isDefault = true;

    extensions.packages = with pkgs.nur.repos.rycee.firefox-addons; [
      ublock-origin
      tridactyl
      don-t-fuck-with-paste
      decentraleyes
      privacy-badger
      istilldontcareaboutcookies
      violentmonkey
      wayback-machine
      leechblock-ng
      kristofferhagen-nord-theme
    ];

    settings = {
      # Your existing privacy settings
      "privacy.trackingprotection.enabled" = true;
      "privacy.trackingprotection.socialtracking.enabled" = true;
      "privacy.donottrackheader.enabled" = true;
      "datareporting.healthreport.uploadEnabled" = false;
      "datareporting.policy.dataSubmissionEnabled" = false;
      "toolkit.telemetry.enabled" = false;
      "dom.security.https_only_mode" = true;
      "security.tls.insecure_fallback_hosts" = "";
      "media.autoplay.default" = 5;
      "browser.cache.disk.enable" = false;
      "browser.sessionstore.privacy_level" = 2;

      # ADD THESE for Hyprland performance
      "widget.use-xdg-desktop-portal.file-picker" = 1;
      "gfx.webrender.all" = true;
      "media.ffmpeg.vaapi.enabled" = true;
      "layers.acceleration.force-enabled" = true;
    };

    userChrome = ''
      /* Your existing Nord theme */
      #TabsToolbar {
        visibility: collapse !important;
      }
      :root {
        --nord0: #2e3440;
        --nord1: #3b4252;
        --nord2: #434c5e;
        --nord3: #4c566a;
        --nord4: #d8dee9;
        --nord5: #e5e9f0;
        --nord6: #eceff4;
        --nord7: #8fbcbb;
        --nord8: #88c0d0;
        --nord9: #81a1c1;
        --nord10: #5e81ac;
      }
      #navigator-toolbox {
        background-color: var(--nord1) !important;
      }
      #urlbar {
        background-color: var(--nord2) !important;
        color: var(--nord6) !important;
      }
    '';

    bookmarks = {
      force = true;
      settings = [
        {
          name = "Toolbar";
          toolbar = true;
          bookmarks = [
            {
              name = "NixOS Manual";
              url = "https://nixos.org/manual/nixos/stable/";
            }
          ];
        }
      ];
    };
  };
};
}
#+end_src
** Development
*** default.nix
Basic development packages for ease of development and deployment.

#+begin_src nix :tangle modules/development/default.nix
{ config, pkgs, ... }:
{
  imports = [
    ./doom.nix
  ];

  # CLI/TUI tools
  environment.systemPackages = with pkgs; [
    # Editor
    neovim
    hugo
    # Go toolchain
    go
    gopls
    godef
    gotools

    (python313.withPackages (ps: with ps; [
      tweepy
      mastodon-py
    ]))
    gcc
    gh
    glibc
    clang
    cmake
    libtool
    gnumake
    sdbus-cpp
    keychain
    pciutils

    # Rust related
    rustc
    cargo
    rustfmt
    rust-analyzer
    clippy
  ];
}
#+end_src

*** doom.nix
Emacs configuration using DOOM emacs.
#+begin_src nix :tangle modules/development/doom.nix
{ config, pkgs, ... }:
{
  # Install Emacs and Doom dependencies at system level
  environment.systemPackages = with pkgs; [
    emacs
    emacsPackages.mu4e
    # Doom Emacs dependencies
    ripgrep
    vips
    wmctrl
    fd
    imagemagick
    texlive.combined.scheme-full  # For LaTeX support
    sqlite       # For org-roam
    aspell
    aspellDicts.en
    aspellDicts.en-computers  # technical terms
    aspellDicts.en-science    # scientific terms

    # Additional tools Doom might need
    git
    tea
    curl
    wget

    # Additional Doom dependencies
    nodejs  # For LSP servers
    shellcheck  # For shell script checking
    html-tidy  # For HTML formatting
    stylelint  # For CSS linting

    # Fonts that Doom recommends
    emacs-all-the-icons-fonts
  ];

  # System-level Emacs configuration
  services.emacs = {
    enable = true;
    package = pkgs.emacs;
    defaultEditor = true;  # Set Emacs as default editor
  };
}
#+end_src
** CLI/TUI
*** default.nix
Default shell utilities across machines.

#+begin_src nix :tangle modules/cli-tui/default.nix
{ config, pkgs, ... }:

{
  imports = [
    ./zsh.nix
    ./tmux.nix
  ];

  # Tools that don't need configuration - just install them
  environment.systemPackages = with pkgs; [
    # Basic CLIs
    eza              # Better ls
    zoxide           # Better cd
    yazi             # Terminal file manager
    bat              # Better cat
    fd               # Better find
    ripgrep-all      # Better grep
    fzf              # Fuzzy finder
    wget
    httrack
    curl
    killall
    zip
    unzip
    jq
    rsync
    borgbackup
    coreutils
    ydotool
    gnupg
    age
    tea
    tree
    neovim
    dig

    # Nix workflow
    nixd  # Nix LSP
    nh  # nix helper
    nixfmt
    direnv
    devenv
    nix-output-monitor

    # Git tools
    lazygit          # Git TUI

    # Networking tools
    nmap

    # Pass
    (pass-wayland.withExtensions (exts: with exts; [
        pass-otp
        pass-import
        pass-audit
    ]))

    # System tools
    btop             # Better top
    trash-cli        # Safe rm
    tldr             # Simplified man pages
    fastfetch        # System info

    # Development containers
    podman           # Container runtime
    podman-compose   # Docker-compose for podman
  ];

  # Enable podman
  virtualisation.podman = {
    enable = true;
    dockerCompat = true;  # Create docker alias
    defaultNetwork.settings.dns_enabled = false;
  };
}
#+end_src
*** tmux.nix
#+begin_src nix :tangle modules/cli-tui/tmux.nix
{ config, pkgs, ... }:

{
  # System-level tmux installation
  environment.systemPackages = with pkgs; [
    tmux
    tmuxifier
  ];

  # Home-manager will handle the config via symlink
  programs.tmux.enable = true;
}
#+end_src
*** podman.nix
#+begin_src nix :tangle modules/cli-tui/podman.nix

#+end_src
*** zsh.nix
ZSH setup. TODO: enhance speed of startup and decide if we include modules from nix or just dotfiles.

#+begin_src nix :tangle modules/cli-tui/zsh.nix
{ config, pkgs, ... }:
{
  # Enable zsh with built-in configuration
  programs.zsh = {
    enable = true;
    ohMyZsh = {
      enable = true;
      plugins = [ "git" "sudo" "history" "fzf" ];
      theme = "robbyrussell";
    };
    autosuggestions.enable = true;
    syntaxHighlighting.enable = true;

    # Remove this line - it doesn't exist
    # enableFzfIntegration = true;

    # Optional: Add some aliases
    shellAliases = {
      ll = "ls -l";
      la = "ls -la";
      grep = "grep --color=auto";
    };
  };

  # Set zsh as default shell for user
  users.users.joshua.shell = pkgs.zsh;

  # Install additional tools
  environment.systemPackages = with pkgs; [
    starship  # Modern prompt
    fzf       # Fuzzy finder
    fd        # Better find (used by fzf)
    ripgrep   # Better grep (used by fzf)
  ];
}
#+end_src

** Desktop
*** default.nix
This declares all desktop modules for importing to desktop/laptops.

#+begin_src nix :tangle modules/desktop/default.nix
{ config, pkgs, ... }:
{
  imports = [
    ./hyprland.nix
    ./kmonad.nix
    ./fonts.nix
    ./audio.nix
    ./bluetooth.nix
    ./printing.nix
    ./browsers.nix
    ./applications.nix
    ./email.nix
    ./gaming.nix
    ./display-manager.nix
    ./storage.nix
    ./theming.nix
    ./boot.nix
    ./power.nix
  ];
}
#+end_src
*** hyprland.nix (system module)
#+begin_src nix :tangle modules/desktop/hyprland.nix
{ config, pkgs, ... }:

{
  # Enable Hyprland at system level
  programs.hyprland = {
    enable = true;
    xwayland.enable = true;
  };

  xdg.portal = {
  enable = true;
  extraPortals = [
    pkgs.xdg-desktop-portal-hyprland
    pkgs.xdg-desktop-portal-gtk
  ];
  config = {
    common.default = "*";
    hyprland.default = ["hyprland" "gtk"];
  };
};

  environment.sessionVariables = {
  MOZ_ENABLE_WAYLAND = "1";
  NIXOS_OZONE_WL = "1";  # Also helps Electron apps
};

  # Install Hyprland ecosystem packages
  environment.systemPackages = with pkgs; [
    waybar
    wtype
    wofi
    swww
    grim
    slurp
    wl-clipboard
    xclip
    hyprlock
    hypridle
    hyprpicker
    hyprutils
    hyprsunset
    wlsunset
    hyprwayland-scanner
    swaynotificationcenter
    kitty
  ];
}
#+end_src

*** kmonad.nix
Kmonad setup for keyboard layout using Colemak DH and various enhancements.

#+begin_src nix :tangle modules/desktop/kmonad.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    kmonad
  ];

  # Setup Kmonad
  boot.kernelModules = [ "uinput" ];

  services.udev.extraRules = ''
    # KMonad user access to /dev/uinput
    KERNEL=="uinput", MODE="0660", GROUP="input", TAG+="uaccess"
  '';

  # Add your user to the input group
  users.users.joshua.extraGroups = [ "input" ];
}
#+end_src
*** fonts.nix
Font setup, Alegreya for reading, Geist for monospace, montserrat for professional.

#+begin_src nix :tangle modules/desktop/fonts.nix
{ config, pkgs, ... }:
{
  fonts = {
    packages = with pkgs; [
      alegreya
      # New nerd-fonts namespace
      nerd-fonts.geist-mono
      montserrat
      # Add any other fonts you need
    ];

    # Font configuration
    fontconfig = {
      enable = true;
      defaultFonts = {
        serif = [ "Alegreya" ];
        sansSerif = [ "Montserrat" ];
        monospace = [ "GeistMono Nerd Font" ];
      };
    };
  };
}
#+end_src
*** audio.nix
Piplewire, alsa, other minor audio tweaks

#+begin_src nix :tangle modules/desktop/audio.nix
{ config, pkgs, ... }:
{
  # Disable PulseAudio in favor of PipeWire
  services.pulseaudio.enable = false;

  # Enable real-time audio support
  security.rtkit.enable = true;

  # PipeWire configuration
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # Uncomment if you need JACK support
    # jack.enable = true;
  };

  # Audio packages
  environment.systemPackages = with pkgs; [
    pavucontrol
    playerctl
    wireplumber
  ];
}
#+end_src
*** bluetooth.nix
Bluetooth services for desktops

#+begin_src nix :tangle modules/desktop/bluetooth.nix
{ config, pkgs, ... }:
{
  # Enable Bluetooth
  hardware.bluetooth.enable = true;
  services.blueman.enable = true;

  environment.systemPackages = with pkgs; [
    bluez
    bluetui
    blueman
    bluez-tools
  ];
}
#+end_src
*** printing.nix
Setup printing availability for desktop machines.

#+begin_src nix :tangle modules/desktop/printing.nix
{ config, pkgs, ... }:
{
  # Enable CUPS for printing
  services.printing.enable = true;
}
#+end_src
*** browsers.nix
Brave, Tor, and Firefox browsers.

#+begin_src nix :tangle modules/desktop/browsers.nix
{ config, pkgs, ... }:
{
  # System-level browser installations
  environment.systemPackages = with pkgs; [
    brave
    tor-browser
  ];

  # Firefox with extensions via home-manager approach
programs.firefox = {
    enable = true;
    policies = {
      DisableTelemetry = true;
      DisableFirefoxStudies = true;
      DisablePocket = true;
      BlockAboutConfig = false;
      OfferToSaveLogins = false;
    };
  };
}
#+end_src
*** applications.nix
Various desktop applications for comms, files, etc.

#+begin_src nix :tangle modules/desktop/applications.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    # File managers
    xfce.thunar
    xfce.tumbler

    # Communication
    signal-desktop
    telegram-desktop
    thunderbird

    # Graphics and image optimizations
    gimp3-with-plugins
    libwebp
    libavif
    mozjpeg
    oxipng
    nodePackages.svgo

    # KDE connect
    kdePackages.kdeconnect-kde

    # Productivity
    libreoffice

    # System utilities
    brightnessctl
    libnotify
    xdg-utils
    gammastep

    # VPN
    mullvad-vpn

    # Others
    qbittorrent
    flatpak

    # Added for Radicale
    apacheHttpd
  ];

  services.resolved.enable = true;
  services.mullvad-vpn.enable = true;
  programs.kdeconnect.enable = true;

systemd.user.services.kdeconnect = {
    description = "KDE Connect daemon";
    wantedBy = [ "default.target" ];
    after = [ "graphical-session.target" ];
    serviceConfig = {
      ExecStart = "${pkgs.kdePackages.kdeconnect-kde}/bin/kdeconnectd";
      Restart = "on-failure";
      RestartSec = 3;
    };
    environment = {
      # Ensure proper DBus session
      DISPLAY = ":0";
    };
  };

  networking.firewall = {
    allowedTCPPortRanges = [ { from = 1714; to = 1764; } ];
    allowedUDPPortRanges = [ { from = 1714; to = 1764; } ];
  };

  # Enable flatpak
  services.flatpak.enable = true;

  # Syncthing for laptop to phone synchronization
  services.syncthing = {
  enable = true;
  user = "joshua";
  dataDir = "/home/joshua/.syncthing";
  configDir = "/home/joshua/.config/syncthing";
  overrideDevices = true;
  overrideFolders = true;

  settings = {
    devices = {
      "phone" = { id = "TTUKVRU-FEJGUXM-SERMOTN-TJNRQKV-7QP2N5J-V3ESDBE-5WTKB4K-2LCGDA3"; };
    };
  };
 };


  # Radicale testing for server calendar/VCard sync
  services.radicale = {
    enable = true;
    settings = {
      server = {
        hosts = [ "0.0.0.0:5232" ];  # Localhost only for testing
      };
      auth = {
        type = "htpasswd";
        htpasswd_filename = "/var/lib/radicale/users";
        htpasswd_encryption = "bcrypt";
      };
      storage = {
        filesystem_folder = "/var/lib/radicale/collections";
      };
      logging = {
        level = "info";  # Helpful for debugging during testing
      };
    };
  };

  networking.firewall = {
    interfaces."tailscale0" = {
      allowedTCPPorts = [ 5232 ];
    };
  };
}
#+end_src
*** display-manager.nix
Login screen.

#+begin_src nix :tangle modules/desktop/display-manager.nix
{ config, pkgs, ... }:
{
  # Enable GDM display manager (updated syntax)
  services.xserver.enable = true;

  services.displayManager.gdm = {
    enable = true;
    wayland = true;
  };
}
#+end_src
*** storage.nix
Dealing with automatic mounting of drives, creating new ISOs etc.

#+begin_src nix :tangle modules/desktop/storage.nix
{ config, pkgs, ... }:
{
 # Enable automatic mounting of USB drives
  services.udisks2.enable = true;

  # Enable GVFS for desktop integration
  services.gvfs.enable = true;

  # Force start udisks2
  systemd.services.udisks2 = {
    wantedBy = [ "graphical-session.target" ];
  };

  # Additional packages for USB/storage management
  environment.systemPackages = with pkgs; [
    # File manager integration
    gvfs          # GNOME Virtual File System
    udisks2       # Disk management service

    # Disk management tools
    gnome-disk-utility  # Disk utility GUI with image writing
    gparted       # Partition editor

    # Image writing tools
    isoimagewriter   # Simple USB image writer
    # or alternatively:
    # gnome-multi-writer  # GNOME's USB writer
    # raspberry-pi-imager # Official Pi imager (works for other images too)

    # Command line tools
    dd_rescue     # Better dd with error recovery
    pv            # Progress viewer for dd operations
  ];
}
#+end_src
*** theming.nix
Setting nord theming and styles. Replace packages here for setting your own custom theme.

#+begin_src nix :tangle modules/desktop/theming.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    nordic
    nordzy-cursor-theme
    zafiro-icons
    papirus-icon-theme
    polkit_gnome
  ];

  programs.dconf.enable = true;
  security.polkit.enable = true;

  systemd.user.services.polkit-gnome-authentication-agent-1 = {
    description = "polkit-gnome-authentication-agent-1";
    wantedBy = [ "graphical-session.target" ];
    wants = [ "graphical-session.target" ];
    after = [ "graphical-session.target" ];
    serviceConfig = {
      Type = "simple";
      ExecStart = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
      Restart = "on-failure";
      RestartSec = 1;
      TimeoutStopSec = 10;
    };
  };
}
#+end_src

*** boot.nix
This sets up boot screens and adds logos with plymouth

#+begin_src nix :tangle modules/desktop/boot.nix
{ config, lib, pkgs, ... }:

{
  # Fast, beautiful Plymouth boot with NixOS branding
  boot.plymouth = {
    enable = true;
    theme = "breeze";
  };

  # Silent boot for speed and clean look
  boot.kernelParams = [
    "quiet"
    "splash"
    "loglevel=3"
    "rd.systemd.show_status=false"
    "rd.udev.log_level=3"
    "systemd.show_status=auto"
  ];

  boot.consoleLogLevel = 0;

  # Fast boot timeout (updated option name)
  boot.loader.timeout = 1;

  # Beautiful GRUB theme
  boot.loader.grub.theme = pkgs.nixos-grub2-theme;

  # Keep boot entries clean
  boot.loader.grub.configurationLimit = 5;

  # LUKS + Plymouth integration for themed password prompts
  boot.initrd.systemd.enable = true;
}
#+end_src

*** power.nix
#+begin_src nix :tangle modules/desktop/power.nix
{ config, lib, pkgs, ... }:

{
  # Disable conflicting power management
  services.power-profiles-daemon.enable = false;

  # Core power management
  services = {
    # Essential power monitoring
    upower = {
      enable = true;
      percentageLow = 15;
      percentageCritical = 5;
      percentageAction = 3;
      criticalPowerAction = "Hibernate";
    };

    # TLP for battery optimization
    tlp = {
      enable = true;
      settings = {
        # CPU management
        CPU_SCALING_GOVERNOR_ON_AC = "performance";
        CPU_SCALING_GOVERNOR_ON_BAT = "powersave";

        # AMD Ryzen optimizations
        CPU_ENERGY_PERF_POLICY_ON_AC = "performance";
        CPU_ENERGY_PERF_POLICY_ON_BAT = "power";

        # Basic power saving
        WIFI_PWR_ON_AC = "off";
        WIFI_PWR_ON_BAT = "on";

        # USB autosuspend
        USB_AUTOSUSPEND = 1;

        # NVMe power management
        DISK_DEVICES = "nvme0n1";
        DISK_APM_LEVEL_ON_BAT = "128";
      };
    };

    # Thermal management
    thermald.enable = true;

    # Firmware updates
    fwupd.enable = true;
  };

  # Essential tools
  environment.systemPackages = with pkgs; [
    powertop
    acpi
    lm_sensors
  ];

  # AMD-specific kernel parameter
  boot.kernelParams = [ "amd_pstate=active" ];

  # Basic power management
  powerManagement = {
    enable = true;
    powertop.enable = true;
  };

  # AMD microcode
  hardware.cpu.amd.updateMicrocode = true;
}
#+end_src
*** email.nix
Setting up email in mu4e in emacs, packages necessary:

#+begin_src nix :tangle modules/desktop/email.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    mu
    isync
    msmtp
    gnutls
  ];
}
#+end_src
*** gaming.nix
Add OSRS Runelite to nixOS

#+begin_src nix :tangle modules/desktop/gaming.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    runelite
  ];
}
#+end_src

** Shared
*** default.nix
#+begin_src nix :tangle modules/shared/default.nix
{ config, pkgs, inputs, ... }:
{
  imports = [
    ./networking.nix
  ];

  # Fix NUR overlay reference
  nixpkgs.overlays = [ inputs.nur.overlays.default ];

  # Common configuration for all hosts
  time.timeZone = "America/Edmonton";
  i18n.defaultLocale = "en_CA.UTF-8";

 # Enable flakes and trusted users
  nix.settings = {
    experimental-features = [ "nix-command" "flakes" ];
    trusted-users = [ "root" "joshua" ];  # Add this line
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;
}
#+end_src

*** networking.nix
#+begin_src nix :tangle modules/shared/networking.nix
{ config, pkgs, ... }:
{
  # Enable NetworkManager
  networking.networkmanager.enable = true;

  # Packages
  environment.systemPackages = with pkgs; [
    networkmanager
    networkmanagerapplet
  ];
}
#+end_src

** Server
** Services
*** default.nix
#+begin_src nix :tangle modules/services/default.nix
{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.homelab;

  # For a server, it's most reliable to use its static IP directly.
  # Ensure your router has a DHCP reservation to always assign this IP.
  serverIP = "192.168.0.28";

  # Automatically generate DNS rewrite rules from Caddy's virtual hosts
  dnsRewrites = lib.mapAttrsToList (name: value: {
    domain = builtins.head (lib.splitString ":" name);
    answer = serverIP;
  }) config.services.caddy.virtualHosts;

in
{
  options.services.homelab = {
    enable = mkEnableOption "Enable all homelab services";

    mediaDir = mkOption {
      type = types.str;
      default = "/home/joshua/Media";
      description = "Base directory for media files";
    };

    user = mkOption {
      type = types.str;
      default = "joshua";
      description = "Main user for services";
    };

    timezone = mkOption {
      type = types.str;
      default = "America/Edmonton";
      description = "Timezone for services";
    };
  };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs; [
      # needed for radicale
      apacheHttpd
    ];

    # Jellyfin - Native media server
    services.jellyfin = {
      enable = true;
      openFirewall = false;
    };

    # Syncthing for data sync - daily to server + phone to server
    services.syncthing = {
      enable = true;
      user = cfg.user;
      dataDir = "/home/${cfg.user}/syncthing";
      configDir = "/home/${cfg.user}/.config/syncthing";
      openDefaultPorts = false;
      overrideDevices = true;
      overrideFolders = true;

      settings = {
        devices = {
          "phone" = {
            id = "TTUKVRU-FEJGUXM-SERMOTN-TJNRQKV-7QP2N5J-V3ESDBE-5WTKB4K-2LCGDA3";
          };
        };
        folders = {
          # Example:
          # "phone-photos" = {
          #   path = "${cfg.mediaDir}/photos/phone";
          #   devices = [ "phone" ];
          # };
        };
      };
    };

    # Miniflux - RSS feed reader
    services.miniflux = {
      enable = true;
      config = {
        LISTEN_ADDR = "0.0.0.0:8082";
      };
      adminCredentialsFile = "/run/agenix/miniflux-admin";
    };

    # Paperless-NGX - Document management
    services.paperless = {
      enable = true;
      address = "0.0.0.0";
      port = 28981;
      settings = {
        PAPERLESS_OCR_LANGUAGE = "eng";
        PAPERLESS_TIME_ZONE = cfg.timezone;
        PAPERLESS_ADMIN_USER = cfg.user;
        PAPERLESS_ADMIN_PASSWORD = "changeme"; # Change this after first login
      };
    };

    # Immich - Self-hosted photo and video management
    services.immich = {
      enable = true;
      host = "0.0.0.0";
      port = 2283;
    };

    # Uptime Kuma - Service monitoring
    services.uptime-kuma = {
      enable = true;
      settings = {
        PORT = "3002";
        HOST = "0.0.0.0";
      };
    };

    # Microbin - Self-hosted pastebin
    services.microbin = {
      enable = true;
      settings = {
        MICROBIN_PORT = 8090;
        MICROBIN_BIND = "0.0.0.0";
        MICROBIN_PUBLIC_PATH = "https://paste.empirica";
        MICROBIN_EDITABLE = true;
        MICROBIN_HIDE_FOOTER = false;
        MICROBIN_PRIVATE = false;
      };
    };

    # Audiobookshelf
    services.audiobookshelf = {
      enable = true;
      port = 13378;
      host = "0.0.0.0";
      openFirewall = false;
    };

    # The *arr stack for media management
    services.radarr = {
      enable = true;
      openFirewall = false;
    };

    services.lidarr = {
      enable = true;
      openFirewall = false;
    };

    services.prowlarr = {
      enable = true;
      openFirewall = false;
    };

    services.sonarr = {
      enable = true;
      openFirewall = false;
    };

    services.sabnzbd = {
      enable = true;
      openFirewall = false;
    };

    services.bazarr = {
      enable = true;
      openFirewall = false;
    };

    services.adguardhome = {
      enable = true;
      host = "0.0.0.0";
      port = 3001;
      openFirewall = false;
      settings = {
        dns = {
          bind_hosts = [ "0.0.0.0" ];
          port = 53;
          upstream_dns = [
            "1.1.1.1"
            "8.8.8.8"
          ];
        };
        filtering = {
          rewrites = dnsRewrites;
        };
      };
    };

    # Radicale - CalDAV/CardDAV server
    services.radicale = {
      enable = true;
      settings = {
        server = {
          hosts = [ "0.0.0.0:5232" ];
        };
        auth = {
          type = "htpasswd";
          htpasswd_filename = "/var/lib/radicale/users";
          htpasswd_encryption = "bcrypt";
        };
        storage = {
          filesystem_folder = "/var/lib/radicale/collections";
        };
        logging = {
          level = "info";
        };
      };
    };

    # Homepage setup
    services.homepage-dashboard = {
      enable = true;
      listenPort = 3000;
      openFirewall = false;

      settings = {
        title = "Empirica Homelab";
        theme = "dark";
        color = "slate";
        background = "https://raw.githubusercontent.com/jblais493/Wallpapers/refs/heads/master/serenity.jpg";
        backgroundOpacity = 0.5;
        headerStyle = "boxed";
        hideVersion = true;

        layout = {
          "Network Infrastructure" = {
            style = "row";
            columns = 3;
          };
          "Media Consumption" = {
            style = "row";
            columns = 3;
          };
          "Media Automation" = {
            style = "row";
            columns = 3;
          };
          "Knowledge & Documents" = {
            style = "row";
            columns = 3;
          };
          "Operations & Utilities" = {
            style = "row";
            columns = 3;
          };
        };
      };

      widgets = [
        {
          resources = {
            cpu = true;
            memory = true;
            disk = "/dev/nvme0n1p2";
            uptime = true;
          };
        }
        {
          datetime = {
            text_size = "sm";
            format = {
              dateStyle = "full";
            };
          };
        }
      ];

      services = [
        # Foundation Layer: Infrastructure that enables everything else
        {
          "Network Infrastructure" = [
            {
              "AdGuard Home" = {
                icon = "https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/webp/adguard-home.webp";
                href = "https://adguard.empirica";
                description = "DNS sovereignty and network-level blocking";
                # widget = {
                #   type = "adguard";
                #   url = "http://localhost:3001";
                # };
              };
            }
            {
              "Router" = {
                icon = "router";
                href = "http://192.168.0.1";
                description = "Gateway and perimeter defense";
              };
            }
            {
              "Syncthing" = {
                icon = "syncthing";
                href = "https://sync.empirica";
                description = "Distributed file synchronization";
                # widget = {
                #   type = "syncthing";
                #   url = "http://localhost:8384";
                # };
              };
            }
          ];
        }

        # Consumption Layer: Direct interaction with media
        {
          "Media Consumption" = [
            {
              "Jellyfin" = {
                icon = "jellyfin";
                href = "https://jellyfin.empirica";
                description = "Self-hosted media server";
                # widget = {
                #   type = "jellyfin";
                #   url = "http://localhost:8096";
                #   key = "{{HOMEPAGE_VAR_JELLYFIN_KEY}}";
                # };
              };
            }
            {
              "Audiobookshelf" = {
                icon = "audiobookshelf";
                href = "https://audiobookshelf.empirica";
                description = "Audiobook and podcast server";
              };
            }
            {
              "Calibre" = {
                icon = "https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/png/calibre-web.png";
                href = "https://calibre.empirica";
                description = "Ebook library and management";
              };
            }
          ];
        }

        # Automation Layer: The invisible machinery (your "arr" stack)
        {
          "Media Automation" = [
            {
              "Prowlarr" = {
                icon = "prowlarr";
                href = "https://prowlarr.empirica";
                description = "Indexer manager - the source of all sources";
                # widget = {
                #   type = "prowlarr";
                #   url = "http://localhost:9696";
                #   key = "{{HOMEPAGE_VAR_PROWLARR_KEY}}";
                # };
              };
            }
            {
              "Radarr" = {
                icon = "radarr";
                href = "https://radarr.empirica";
                description = "Movie collection manager";
                # widget = {
                #   type = "radarr";
                #   url = "http://localhost:7878";
                #   key = "{{HOMEPAGE_VAR_RADARR_KEY}}";
                # };
              };
            }
            {
              "Sonarr" = {
                icon = "sonarr";
                href = "https://sonarr.empirica";
                description = "Series collection manager";
                # widget = {
                #   type = "sonarr";
                #   url = "http://localhost:8989";
                #   key = "{{HOMEPAGE_VAR_SONARR_KEY}}";
                # };
              };
            }
            {
              "Lidarr" = {
                icon = "lidarr";
                href = "https://lidarr.empirica";
                description = "Music collection manager";
                # widget = {
                #   type = "lidarr";
                #   url = "http://localhost:8686";
                #   key = "{{HOMEPAGE_VAR_LIDARR_KEY}}";
                # };
              };
            }
            {
              "Bazarr" = {
                icon = "bazarr";
                href = "https://bazarr.empirica";
                description = "Subtitle automation";
                # widget = {
                #   type = "bazarr";
                #   url = "http://localhost:6767";
                #   key = "{{HOMEPAGE_VAR_BAZARR_KEY}}";
                # };
              };
            }
            {
              "SABnzbd" = {
                icon = "sabnzbd";
                href = "https://sabnzbd.empirica";
                description = "Usenet download client";
                # widget = {
                #   type = "sabnzbd";
                #   url = "http://localhost:8080";
                #   key = "{{HOMEPAGE_VAR_SABNZBD_KEY}}";
                # };
              };
            }
          ];
        }

        # Knowledge Management: Information consumption and document storage
        {
          "Knowledge & Documents" = [
            {
              "Miniflux" = {
                icon = "miniflux";
                href = "https://miniflux.empirica";
                description = "RSS feed reader - curated information diet";
              };
            }
            {
              "Paperless-NGX" = {
                icon = "https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/webp/paperless-ngx.webp";
                href = "https://paperless.empirica";
                description = "Document management with OCR";
                # widget = {
                #   type = "paperlessngx";
                #   url = "http://localhost:28981";
                #   key = "{{HOMEPAGE_VAR_PAPERLESS_KEY}}";
                # };
              };
            }
            {
              "Immich" = {
                icon = "immich";
                href = "https://immich.empirica";
                description = "Self-hosted photo and video management";
              };
            }
          ];
        }

        # Operations: Monitoring and utilities
        {
          "Operations & Utilities" = [
            {
              "Uptime Kuma" = {
                icon = "https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/webp/uptime-kuma.webp";
                href = "https://uptime.empirica";
                description = "Service monitoring and status";
                # widget = {
                #   type = "uptimekuma";
                #   url = "http://localhost:3002";
                #   slug = "homelab";
                # };
              };
            }
            {
              "Microbin" = {
                icon = "https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/webp/microbin.webp";
                href = "https://paste.empirica";
                description = "Self-hosted pastebin";
              };
            }
          ];
        }
      ];

      # When ready, uncomment this and create /run/secrets/homepage-env with API keys
      # environmentFile = "/run/secrets/homepage-env";
    };

    # Homepage environment configuration
    # NOTE: Required because homepage-dashboard module doesn't expose environment config
    systemd.services.homepage-dashboard.serviceConfig = {
      Environment = [
        "HOMEPAGE_ALLOWED_HOSTS=homepage.empirica,100.69.46.98:3000,100.69.46.98"
      ];
    };

    # Reverse proxy for all services (critical for clean architecture)
    services.caddy = {
      enable = true;

      virtualHosts = {
        "jellyfin.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:8096
          '';
        };
        "sync.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:8384 {
              header_up Host localhost:8384
              header_up X-Forwarded-Host {host}
            }
          '';
        };
        "homepage.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:3000
          '';
        };
        "radicale.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:5232
          '';
        };
        "adguard.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:3001
          '';
        };
        "audiobookshelf.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:13378
          '';
        };
        "calibre.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:8083
          '';
        };
        "radarr.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:7878
          '';
        };
        "sonarr.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:8989
          '';
        };
        "lidarr.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:8686
          '';
        };
        "prowlarr.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:9696
          '';
        };
        "bazarr.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:6767
          '';
        };
        "sabnzbd.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:8080
          '';
        };
        # New services
        "miniflux.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:8082
          '';
        };
        "paperless.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:28981
          '';
        };
        "immich.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:2283 {
              header_up X-Forwarded-For {remote_host}
              header_up X-Forwarded-Proto {scheme}
            }
          '';
        };
        "uptime.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:3002
          '';
        };
        "paste.empirica" = {
          extraConfig = ''
            tls internal
            reverse_proxy localhost:8090
          '';
        };
      };
    };

    # Create media directories with proper permissions
    systemd.tmpfiles.rules = [
      "d '${cfg.mediaDir}' 0755 ${cfg.user} users - -"
      "d '${cfg.mediaDir}/movies' 0755 ${cfg.user} users - -"
      "d '${cfg.mediaDir}/tvshows' 0755 ${cfg.user} users - -"
      "d '${cfg.mediaDir}/music' 0755 ${cfg.user} users - -"
      "d '${cfg.mediaDir}/books' 0755 ${cfg.user} users - -"
      "d '${cfg.mediaDir}/audiobooks' 0755 ${cfg.user} users - -"
      "d '${cfg.mediaDir}/photos' 0775 joshua joshua - -"  # Changed: joshua:joshua, mode 0775 for immich use

      # Media folders for immich
      "d /var/lib/immich 0750 immich immich -"
      "d /var/lib/immich/upload 0750 immich immich -"
      "d /var/lib/immich/library 0750 immich immich -"

      # Container config directories (only for Calibre now)
      "d '/home/${cfg.user}/containers/calibre-web-automated' 0755 ${cfg.user} users - -"
      "d '/home/${cfg.user}/containers/calibre-web-automated/config' 0755 ${cfg.user} users - -"

      # Radicale directory and empty users file
      "d '/var/lib/radicale' 0750 radicale radicale - -"
      "f '/var/lib/radicale/users' 0640 radicale radicale - -"
    ];

    # Podman for containers
    virtualisation.podman = {
      enable = true;
      dockerCompat = true;
      defaultNetwork.settings.dns_enabled = false;
    };

    # Calibre-Web-Automated container (only container needed)
    virtualisation.oci-containers.containers.calibre-web-automated = {
      image = "crocodilestick/calibre-web-automated:latest";
      autoStart = true;

      ports = [
        "0.0.0.0:8083:8083"
      ];

      volumes = [
        "${cfg.mediaDir}/books:/books"
        "/home/${cfg.user}/containers/calibre-web-automated/config:/config"
      ];

      environment = {
        PUID = "1000";
        PGID = "100";
        TZ = cfg.timezone;
        CALIBRE_LIBRARY_PATH = "/books";
        METADATA_UPDATE = "true";
      };
    };

    # Tailscale service
    services.tailscale.enable = true;

    # Firewall: Allow access on LAN
    networking.firewall = {
      allowedTCPPorts = [ 53 80 443 3001 ];
      allowedUDPPorts = [ 53 ];
    };
  };
}
#+end_src

** Security
*** default.nix
#+begin_src nix :tangle modules/security/default.nix
{ config, pkgs, ... }:
{
  imports = [
    ./keychain.nix
    # Add other security modules here as you create them
  ];

  # Basic security hardening
  security = {
    sudo.wheelNeedsPassword = true;

    # Disable root login
    sudo.enable = true;
  };

  # enable mosh
  programs.mosh.enable = true;

  # Tailscale service
  services.tailscale.enable = true;

  # SSH hardening
  services.openssh = {
    enable = true;
    settings = {
      PasswordAuthentication = false;
      PermitRootLogin = "no";
      Protocol = 2;
    };
  };

  # Firewall
  networking.firewall.enable = true;

  # Security packages
  environment.systemPackages = with pkgs; [
    fail2ban
    gnupg
    age
  ];
}
#+end_src
*** fail2ban.nix
*** keychain.nix
#+begin_src nix :tangle modules/security/keychain.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    keychain
  ];
}
#+end_src
** Media
*** default.nix
#+begin_src nix :tangle modules/media/default.nix
{ config, pkgs, ... }:
{
  imports = [
    ./music.nix
    ./video.nix
    ./pdf.nix
  ];

  # Common media packages
  environment.systemPackages = with pkgs; [
    # Image viewers
    feh
    imv

    # Audio tools
    alsa-utils

    # Document viewers
    zathura
    evince
  ];
}
#+end_src
*** music.nix
#+begin_src nix :tangle modules/media/music.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    # Music players
    mpc
    ncmpcpp
    spotify
    spotdl
    # Audio tools
    audacity
    # Audio codecs
    ffmpeg-full
    flac
    lame
  ];

  # Ensure users can access audio devices
  users.groups.audio = {};
}
#+end_src
*** video.nix
#+begin_src nix :tangle modules/media/video.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    # Video players
    mpv
    vlc

    # Video editing
    obs-studio
    shotcut

    # Anime CLI:
    ani-cli

    # Video tools
    ffmpeg
    yt-dlp
  ];
}
#+end_src
*** pdf.nix
#+begin_src nix :tangle modules/media/pdf.nix
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    # PDF viewers
    zathura
    evince
    kdePackages.okular

    # PDF tools
    poppler_utils
    pdftk

    # Document conversion
    pandoc
    texlive.combined.scheme-full
  ];
}
#+end_src
** Secrets
This will define secrets decryption for desktops

*** secrets-joshua
#+begin_src nix :tangle modules/secrets-joshua.nix
{ config, lib, ... }:
{
  age.identityPaths = [
    "/home/joshua/.config/age/keys.txt"
  ];

  age.secrets = {
    canlock = {
      file = ../secrets/canlock.age;
      owner = "joshua";
      mode = "400";
    };
    gnus-name = {
      file = ../secrets/gnus-name.age;
      owner = "joshua";
      mode = "400";
    };
    gnus-email = {
      file = ../secrets/gnus-email.age;
      owner = "joshua";
      mode = "400";
    };
  };
}
#+end_src
*** secrets-empirica
#+begin_src nix :tangle modules/secrets-empirica.nix
{ config, lib, ... }:
{
  age.identityPaths = [
    "/etc/age/keys.txt"
  ];

  age.secrets = {
miniflux-admin = {
    file = ../secrets/miniflux-admin.age;
    owner = "root";
    group = "root";
    mode = "0400";  # Root readable only
    };
  };
}
#+end_src
* Overlays
* Secrets
We manage secrets with [[https://github.com/ryantm/agenix][agenix]].

The workflow for adding a secret is as follows:
1. Add secret to secrets.nix - specify which keys can decrypt it
2. Create the secret: agenix -e new-secret.age
3. Rekey existing secrets if you added new machines: agenix -r
4. Deploy: Your NixOS systems will automatically decrypt the secrets they have keys for

You can retrieve Machine SSH keys by running ~cat /etc/ssh/ssh_host_ed25519_key.pub~ in any Linux machine with ssh enabled.
** secrets.nix
#+begin_src nix :tangle secrets/secrets.nix
let
  # Your personal SSH public key (from ~/.config/age/keys.txt
  joshua = "age1k0sc4ugaxzpav2rs8cmugwthaa3tpuzygvax8u84m6sm9ldh737qspv058";

  # Machine age keys
  empirica = "age1gt2m3dtrkx3lwnddwv62fesadyd5pkmadtwtdfwvcs4lhcyqt33qfq386s";

  # Groups for convenience
  users = [ joshua ];
  # desktops = [ king theologica ];
  servers = [ empirica ];
  allSystems = users ++ servers;
in
{
  "canlock.age".publicKeys = users;
  "gnus-name.age".publicKeys = users;
  "gnus-email.age".publicKeys = users;
  "miniflux-admin.age".publicKeys = servers;
}
#+end_src

* flake.nix
#+begin_src nix :tangle flake.nix
{
  description = "Joshua Blais' NixOS Configuration";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "github:NixOS/nixpkgs/nixos-25.05";
    nur.url = "github:nix-community/NUR";

    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    deploy-rs = {
      url = "github:serokell/deploy-rs";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    agenix = {
      url = "github:ryantm/agenix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, home-manager, deploy-rs, agenix, disko, ... }@inputs: {
    nixosConfigurations = {
      # Laptop hosts
      theologica = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/theologica/configuration.nix
          agenix.nixosModules.default

          # Add home-manager
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.users.joshua = import ./modules/home-manager;
            home-manager.extraSpecialArgs = { inherit inputs; };
            home-manager.backupFileExtension = "backup";
          }
        ];
      };

      king = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/king/configuration.nix
          agenix.nixosModules.default

          # # Add home-manager
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.users.joshua = import ./modules/home-manager;
            home-manager.extraSpecialArgs = { inherit inputs; };
            home-manager.backupFileExtension = "backup";
          }
        ];
      };

      axios = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/axios/configuration.nix
          agenix.nixosModules.default

          # Add home-manager
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.users.joshua = import ./modules/home-manager;
            home-manager.extraSpecialArgs = { inherit inputs; };
            home-manager.backupFileExtension = "backup";
          }
        ];
      };

      # Server hosts (no home-manager needed)
      empirica = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/empirica/configuration.nix
          agenix.nixosModules.default
        ];
      };

      alexandria = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/alexandria/configuration.nix
          agenix.nixosModules.default
        ];
      };

      empire = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/empire/configuration.nix
          agenix.nixosModules.default
        ];
      };
    };

    # Deploy-rs configuration for remote deployment
    deploy.nodes = {
      empirica = {
        hostname = "192.168.0.28";
        profiles.system = {
          sshUser = "joshua";
          user = "root";
          path = deploy-rs.lib.x86_64-linux.activate.nixos self.nixosConfigurations.empirica;
        };
      };
      alexandria = {
        hostname = "alexandria.your-domain.com";
        profiles.system = {
          user = "root";
          path = deploy-rs.lib.x86_64-linux.activate.nixos self.nixosConfigurations.alexandria;
        };
      };
    };

  checks = builtins.mapAttrs (system: deployLib: deployLib.deployChecks self.deploy) deploy-rs.lib;
  };
}
#+end_src

* Fixes

* DONE
** DONE Persistence of git login
** DONE Addin battery optimizations for laptop
** DONE speed of zsh shell opening
** DONE Get mu4e working
